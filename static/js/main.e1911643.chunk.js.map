{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","style","marginLeft","marginRight","onChange","event","toggleColor","target","value","onClick","toggleMode","role","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","color","heading","rows","backgroundColor","setColor","newText","toUpperCase","showAlert","newLowText","toLowerCase","newCamelText","replace","document","getElementById","select","navigator","clipboard","writeText","split","join","trim","match","length","defaultProps","aboutText","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","_useState3","_useState4","setAlert","_useState5","_useState6","message","setTimeout","body","console","log","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"mMAIe,SAASA,EAAOC,GAI7B,OACEC,IAAAC,cAAA,OAAKC,UAAS,kCAAAC,OAAoCJ,EAAMK,KAAI,QAAAD,OAAOJ,EAAMK,OAC3EJ,IAAAC,cAAA,OAAKC,UAAU,mBAEbF,IAAAC,cAAA,KAAGC,UAAU,eAAeG,KAAK,KAAKN,EAAMO,OAC5CN,IAAAC,cAAA,UAAQC,UAAU,iBAAiBK,KAAK,SAASC,iBAAe,WAAWC,iBAAe,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBAC1LZ,IAAAC,cAAA,QAAMC,UAAU,yBAElBF,IAAAC,cAAA,OAAKC,UAAU,2BAA2BW,GAAG,0BAC3Cb,IAAAC,cAAA,MAAIC,UAAU,mCACZF,IAAAC,cAAA,MAAIC,UAAU,YAEZF,IAAAC,cAAA,KAAGC,UAAU,kBAAkBY,eAAa,OAAOT,KAAK,KAAI,UAMhEL,IAAAC,cAAA,OAAKc,MAAO,CAACC,WAAY,OAAQC,YAAa,KAAMf,UAAU,QAC5DF,IAAAC,cAAA,SAAOM,KAAK,QAAQD,MAAM,0BAA0BY,SAtBrC,SAACC,GACpBpB,EAAMqB,YAAYD,EAAME,OAAOC,WAuB7BtB,IAAAC,cAAA,OAAKC,UAAS,+BAAAC,OAAgD,UAAfJ,EAAMK,KAAiB,OAAO,UAC3EJ,IAAAC,cAAA,SAAOC,UAAU,mBAAmBqB,QAASxB,EAAMyB,WAAYjB,KAAK,WAAWkB,KAAK,SAASZ,GAAG,2BAChGb,IAAAC,cAAA,SAAOC,UAAU,mBAAmBwB,QAAQ,0BAAyB,wBC7B9D,SAASC,EAAS5B,GAC7B,IAyCC6B,EAEsBC,mBAAS,mBAAkBC,EAAAC,YAAAH,EAAA,GAA5CI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GAGrB,OACE9B,IAAAC,cAAAD,IAAAkC,SAAA,KACAlC,IAAAC,cAAA,OAAKC,UAAU,YAAYa,MAAO,CAACoB,MAAmB,SAAbpC,EAAMK,KAAc,QAAQ,YACjEJ,IAAAC,cAAA,UAAKF,EAAMqC,SACXpC,IAAAC,cAAA,OAAKC,UAAU,QACXF,IAAAC,cAAA,YAAUC,UAAU,eAAeoB,MAAOU,EAAMd,SAbjC,SAACC,GAEpBc,EAAQd,EAAME,OAAOC,QAWyDT,GAAG,QAAQwB,KAAK,IAAItB,MAAO,CAACuB,gBAA6B,SAAbvC,EAAMK,KAAc,OAAO,QAAQ+B,MAAmB,SAAbpC,EAAMK,KAAc,QAAQ,cAE/LJ,IAAAC,cAAA,UAAQC,UAAU,WAAWa,MAAO,CAACuB,gBAAmC,OAAnBvC,EAAMwC,SAAkBxC,EAAMwC,SAAS,WAAYhB,QArDtF,WAElB,IAAIiB,EAAUR,EAAKS,cACnBR,EAAQO,GACRzC,EAAM2C,UAAU,0BAA2B,aAiDqF,wBAChI1C,IAAAC,cAAA,UAAQC,UAAU,uBAAuBqB,QA/CxB,WAEjB,IAAIoB,EAAaX,EAAKY,YAAYZ,GAClCC,EAAQU,GACR5C,EAAM2C,UAAU,0BAA2B,aA2CuB,wBAClE1C,IAAAC,cAAA,UAAQC,UAAU,uBAAuBqB,QAzCpB,WACrBU,EAAQ,IACRlC,EAAM2C,UAAU,kBAAmB,aAuCiC,SACpE1C,IAAAC,cAAA,UAAQC,UAAU,uBAAuBqB,QArCnB,WACtB,IAAIsB,EAAeb,EAAKc,QAAQ,cAAe,IAC/Cb,EAAQY,GACR9C,EAAM2C,UAAU,sCAAuC,aAkCc,6BACrE1C,IAAAC,cAAA,UAAQC,UAAU,uBAAuBqB,QAhC1B,WACf,IAAIS,EAAOe,SAASC,eAAe,SACnChB,EAAKiB,SACLC,UAAUC,UAAUC,UAAUpB,EAAKV,OACnCvB,EAAM2C,UAAU,sBAAuB,aA4BuB,aAC9D1C,IAAAC,cAAA,UAAQC,UAAU,uBAAuBqB,QA1BpB,WACrB,IAAIiB,EAAUR,EAAKqB,MAAM,QACzBpB,EAAQO,EAAQc,KAAK,MACrBvD,EAAM2C,UAAU,uBAAwB,aAuB4B,uBAExE1C,IAAAC,cAAA,OAAKC,UAAU,iBAAiBa,MAAO,CAACoB,MAAmB,SAAbpC,EAAMK,KAAc,QAAQ,YACtEJ,IAAAC,cAAA,UAAI,sBACJD,IAAAC,cAAA,SAAoB,KAAhB+B,EAAKuB,OAAc,EAAEvB,EAAKwB,MAAM,QAAQC,OAAO,cAAYzB,EAAKc,QAAQ,OAAQ,IAAIW,OAAO,eAC/FzD,IAAAC,cAAA,SAAI,IAAO+B,EAAKqB,MAAM,KAAKI,OAAO,iBAClCzD,IAAAC,cAAA,UAAI,WACJD,IAAAC,cAAA,SAAI+B,EAAKyB,OAAO,EAAEzB,EAAK,yDDnB/BlC,EAAO4D,aAAe,CAClBpD,MAAO,YACPqD,UAAW,YEpCAC,MAbf,SAAe7D,GAMb,OACEA,EAAM8D,OAAS7D,IAAAC,cAAA,OAAKC,UAAS,eAAAC,OAAiBJ,EAAM8D,MAAMtD,KAAI,gCAAgCkB,KAAK,SAC/FzB,IAAAC,cAAA,cANa,SAAC6D,GAClB,IAAMC,EAAQD,EAAKlB,cACnB,OAAOmB,EAAMC,OAAO,GAAGvB,cAAgBsB,EAAME,MAAM,GAItCC,CAAWnE,EAAM8D,MAAMtD,OAAe,KAAGR,EAAM8D,MAAMM,MC+DvDC,MA9Df,WAAe,IAAAxC,EACWC,mBAAS,SAAQC,EAAAC,YAAAH,EAAA,GAAlCxB,EAAI0B,EAAA,GAAEuC,EAAOvC,EAAA,GAAuBwC,EACjBzC,mBAAS,MAAK0C,EAAAxC,YAAAuC,EAAA,GAAjCT,EAAKU,EAAA,GAAEC,EAAQD,EAAA,GAAoBE,EAChB5C,mBAAS,SAAQ6C,EAAA3C,YAAA0C,EAAA,GAApCtC,EAAKuC,EAAA,GAAEnC,EAAQmC,EAAA,GAGhBhC,EAAY,SAACiC,EAAQpE,GACrBiE,EAAS,CACPL,IAAIQ,EACJpE,KAAKA,IAERqE,WAAW,WACVJ,EAAS,OACR,OAyBP,OACExE,IAAAC,cAAAD,IAAAkC,SAAA,KAIElC,IAAAC,cAACH,EAAM,CAACQ,MAAM,YAAYF,KAAMA,EAAMoB,WA3BvB,WACL,UAATpB,GACDiE,EAAQ,QAERtB,SAAS8B,KAAK9D,MAAMuB,gBAAkB,UACtCI,EAAU,6BAA8B,WACxCK,SAASzC,MAAQ,0BAGjB+D,EAAQ,SACRtB,SAAS8B,KAAK9D,MAAMuB,gBAAkB,QACtCI,EAAU,8BAA+B,WACzCK,SAASzC,MAAQ,2BAe6Cc,YAX9C,SAACE,GACnBwD,QAAQC,IAAIzD,GACZiB,EAASjB,GACTyB,SAAS8B,KAAK9D,MAAMuB,gBAAkBH,GAQoDA,MAAOI,IAC/FvC,IAAAC,cAAC2D,EAAK,CAACC,MAAOA,IACd7D,IAAAC,cAAA,OAAKC,UAAU,kBAEfF,IAAAC,cAAC0B,EAAQ,CAACe,UAAWA,EAAWN,QAAQ,kCAAkChC,KAAMA,OC9CvE4E,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAW/C,SAASC,eAAe,SACpD+C,OACH/F,IAAAC,cAACD,IAAMgG,WAAU,KACfhG,IAAAC,cAACmE,EAAG,QAORY","file":"static/js/main.e1911643.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import { Link } from \"react-router-dom\"\r\n\r\nexport default function Navbar(props) {\r\n  const handleChange = (event) => {\r\n    props.toggleColor(event.target.value)\r\n  }\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n        </li> */}\r\n      </ul>\r\n      <div style={{marginLeft: 'auto', marginRight: '0'}} className=\"mx-2\">\r\n        <input type='color' title=\"Change background color\" onChange={handleChange}/>\r\n      </div>\r\n      <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n      </div>\r\n\r\n      {/* <form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n      </form> */}\r\n    </div>\r\n  </div>\r\n</nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"React Nav\",\r\n    aboutText: \"About Us\"\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () =>{\r\n       // console.log(\"Click on upperCase button\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n\r\n    const handlelowClick=()=>{\r\n        //console.log('Click on lowercase button');\r\n        let newLowText = text.toLowerCase(text);\r\n        setText(newLowText);\r\n        props.showAlert(\"Converted to lowercase!\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = () =>{\r\n        setText('');\r\n        props.showAlert(\"Text is cleared\", \"success\");\r\n    }\r\n\r\n    const handleSpcharClick = () =>{\r\n        let newCamelText = text.replace(/[^a-zA-Z ]/g, \"\");\r\n        setText(newCamelText);\r\n        props.showAlert(\"Removed Special Character from text\", \"success\");\r\n    }\r\n\r\n    const handleCopy = () =>{\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to clipboard\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpace = () =>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event) =>{\r\n        //console.log(\"Click on change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const[text, setText] = useState(\"Enter Text Here\");\r\n    //text = \"testing\"; // Wrong way to change the state\r\n    //setText('This is correct'); // Correct Way ti change the state.\r\n  return (\r\n    <>\r\n    <div className='container' style={{color:props.mode==='dark'?'white':'#0E2049'}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\" style={{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'#0E2049'}}></textarea>\r\n        </div>  \r\n        <button className=\"btn mx-1\" style={{backgroundColor:props.setColor !== null?props.setColor:'#0d6efd'}} onClick={handleUpClick}>Convert To UpperCase</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handlelowClick}>Convert To LowerCase</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleSpcharClick}>Remove Special characters</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpace}>Remove Extra Space</button>\r\n    </div>\r\n    <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'#0E2049'}}>\r\n        <h2>Your Text Summary:</h2>\r\n        <p>{text.trim() === ''?0:text.match(/\\S+/g).length} Words and {text.replace(/\\s+/g, '').length} Characters</p>\r\n        <p>{0.08 * text.split(\" \").length} Minutes read</p>\r\n        <h3>Preview</h3>\r\n        <p>{text.length>0?text:\"Enter something in the texbox above to preview here\"}</p>\r\n    </div>\r\n\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n  //this function is for Alert type first letter make in capital letter.\r\n  const capitalize = (word) =>{\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","//import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\nimport { useState } from 'react';\nimport Alert from './components/Alert';\n\nimport React from 'react'\n//import { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //Wheather dark mode is Enabled or not\n  const [alert, setAlert] = useState(null); //set alert\n  const [color, setColor] = useState('light'); //set color\n\n\n  const showAlert = (message,type) =>{\n        setAlert({\n          msg:message,\n          type:type\n        })   \n       setTimeout(()=> {\n        setAlert(null);\n       },1500);\n  }\n\n  const toggleMode = () =>{\n    if(mode === 'light'){\n      setMode('dark');\n      //console.log('in dark');\n      document.body.style.backgroundColor = '#0E2049';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = 'Textutils - Dark Mode'; // for if you want to show title in tab so use this code\n    }else{\n      //console.log('in light');\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'Textutils - Light Mode'; // for if you want to show title in tab so use this code\n    }\n  }\n\n  const toggleColor = (value) => {\n    console.log(value);\n    setColor(value);\n    document.body.style.backgroundColor = color;\n  }\n\n  return (\n    <> \n    {/*<Navbar title=\"Textutils\" aboutText =\"About Us\"/>*/}\n      {/*<Navbar/>*/}\n      {/* <Router> */}\n      <Navbar title=\"Textutils\" mode={mode} toggleMode={toggleMode} toggleColor={toggleColor} color={setColor}/>\n      <Alert alert={alert}/> \n      <div className=\"container my-3\">\n\n      <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>\n        {/* <Routes>\n          <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>}/>\n          <Route exact path=\"/about\" element={<About/>}/>\n        </Routes> */}\n      \n     \n     {/* <About/> */}\n    </div>\n    {/* </Router> */}\n    </>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}